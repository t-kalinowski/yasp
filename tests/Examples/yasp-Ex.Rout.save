
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "yasp"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('yasp')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("paste-variants")
> ### * paste-variants
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: p
> ### Title: paste variants
> ### Aliases: p p0 pc pcs pcc pcnl pcsc pc_and
> 
> ### ** Examples
> 
> x <- head(letters, 3)
> y <- tail(letters, 3)
> # paste
> p(x, y)
[1] "a x" "b y" "c z"
> p0(x, y)
[1] "ax" "by" "cz"
> # paste + collapse
> pc(x)
[1] "abc"
> pc(x, y)
[1] "axbycz"
> pcs(x)
[1] "a b c"
> pcc(x)
[1] "a, b, c"
> pcc(x, y)
[1] "ax, by, cz"
> pcsc(x)
[1] "a; b; c"
> pcnl(x)
[1] "a\nb\nc"
> pc_and(x[1:2])
[1] "a and b"
> pc_and(x[1:3])
[1] "a, b, and c"
> pc_and(x, y)
[1] "ax, by, and cz"
> pc_and(x, y, sep = "-")
[1] "a-x, b-y, and c-z"
> pc_and(x[1])
[1] "a"
> pc_and(x[0])
[1] ""
> 
> 
> 
> cleanEx()
> nameEx("sentence")
> ### * sentence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sentence
> ### Title: sentence
> ### Aliases: sentence
> 
> ### ** Examples
> 
> compare <- function(x) cat(sprintf(' in: "%s"\nout: "%s"\n', x, sentence(x)))
> compare("capitilized and period added")
 in: "capitilized and period added"
out: "Capitilized and period added."
> compare("whitespace:added ,or removed ; like this.and this")
 in: "whitespace:added ,or removed ; like this.and this"
out: "Whitespace: added, or removed; like this. And this."
> compare("periods and commas in numbers like 1,234.567 are fine !")
 in: "periods and commas in numbers like 1,234.567 are fine !"
out: "Periods and commas in numbers like 1,234.567 are fine!"
> compare("colons can be punctuation or time : 12:00 !")
 in: "colons can be punctuation or time : 12:00 !"
out: "Colons can be punctuation or time: 12:00!"
> compare("only one punctuation mark at a time!.?,;")
 in: "only one punctuation mark at a time!.?,;"
out: "Only one punctuation mark at a time!"
> compare("The first mark ,; is kept;,,with priority for terminal marks ;,.")
 in: "The first mark ,; is kept;,,with priority for terminal marks ;,."
out: "The first mark, is kept; with priority for terminal marks."
> 
> # vectorized like paste()
> sentence(
+  "The", c("first", "second", "third"), "letter is", letters[1:3],
+  parens("uppercase:", sngl_quote(LETTERS[1:3])), ".")
[1] "The first letter is a (uppercase: 'A')." 
[2] "The second letter is b (uppercase: 'B')."
[3] "The third letter is c (uppercase: 'C')." 
> 
> 
> 
> cleanEx()
> nameEx("unwrap")
> ### * unwrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unwrap
> ### Title: unwrap
> ### Aliases: unwrap unparens
> 
> ### ** Examples
> 
> # by default, removes all matching pairs of left and right
> x <- c("a", "(a)", "((a))", "(a) b", "a (b)", "(a) (b)" )
> data.frame( x, unparens(x), check.names = FALSE )
        x unparens(x)
1       a           a
2     (a)           a
3   ((a))           a
4   (a) b         a b
5   a (b)         a b
6 (a) (b)         a b
> 
> # specify n_pairs to remove a specific number of pairs
> x <- c("(a)", "((a))", "(((a)))", "(a) (b)", "(a) (b) (c)", "(a) (b) (c) (d)")
> data.frame( x,
+             "n_pairs=1"   = unparens(x, n_pairs = 1),
+             "n_pairs=2"   = unparens(x, n_pairs = 2),
+             "n_pairs=3"   = unparens(x, n_pairs = 3),
+             "n_pairs=Inf" = unparens(x), # the default
+             check.names = FALSE )
                x     n_pairs=1   n_pairs=2 n_pairs=3 n_pairs=Inf
1             (a)             a           a         a           a
2           ((a))           (a)           a         a           a
3         (((a)))         ((a))         (a)         a           a
4         (a) (b)         a (b)         a b       a b         a b
5     (a) (b) (c)     a (b) (c)     a b (c)     a b c       a b c
6 (a) (b) (c) (d) a (b) (c) (d) a b (c) (d) a b c (d)     a b c d
> 
> # use unwrap() to specify any pair of characters for left and right
> x <- "A string with some \\emph{latex tags}."
> unwrap(x, "\\emph{", "}")
[1] "A string with some latex tags."
> 
> # by default, only pairs are removed. Set a character to "" to override.
> x <- c("a)", "a))", "(a", "((a" )
> data.frame(x, unparens(x),
+   'left=""' = unwrap(x, left = "", right = ")"),
+   check.names = FALSE)
    x unparens(x) left=""
1  a)          a)       a
2 a))         a))       a
3  (a          (a      (a
4 ((a         ((a     ((a
> 
> # make your own functions like this
> # markdown bold
> unbold <- function(x) unwrap(x, "**")
> bold <- function(...) wrap(paste(...), "**")
> (x <- (p("make a word", bold("bold"))))
[1] "make a word **bold**"
> unbold(x)
[1] "make a word bold"
> 
> 
> 
> cleanEx()
> nameEx("wrap")
> ### * wrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wrap
> ### Title: Wrap strings
> ### Aliases: wrap dbl_quote sngl_quote bracket brace parens
> 
> ### ** Examples
> 
> wrap("abc", "__")  #  __abc__
[1] "__abc__"
> parens("abc")      #   (abc)
[1] "(abc)"
> sngl_quote("abc")  #   'abc'
[1] "'abc'"
> dbl_quote("abc")   #   "abc"
[1] "\"abc\""
> bracket("abc")     #   [abc]
[1] "[abc]"
> brace("abc")       #   {abc}
[1] "{abc}"
> 
> label <- p("name", parens("attribute"))
> 
> label             # "name (attribute)"
[1] "name (attribute)"
> unparens(label)   # "name attribute"
[1] "name attribute"
> 
> # make your own function like this:
> # markdown bold
> bold <- function(...) wrap(paste(...), "**")
> p("make a word", bold("bold"))
[1] "make a word **bold**"
> # see unbold example in ?unwrap
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.18 0.008 0.188 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
